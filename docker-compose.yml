x-airflow-common:
  &airflow-common
  image: apache/airflow:latest-python3.11
  environment:
    &airflow-common-env
    AIRFLOW_UID: 50000
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres-airflow:5432/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres-airflow:5432/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: 'YOUR_SECRET_FERNET_KEY'
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__DATABASE__LOAD_DEFAULT_CONNECTIONS: 'false'
    AIRFLOW__API__AUTH_BACKENDS: airflow.api.auth.backend.basic_auth
    MINIO_ENDPOINT: minio
    MINIO_ACCESS_KEY: minio-archi
    MINIO_SECRET_KEY: minio123
    _PIP_ADDITIONAL_REQUIREMENTS: minio psycopg2-binary
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/plugins:/opt/airflow/plugins
    - ./airflow/config:/opt/airflow/config
    - ./airflow/dags/data:/opt/airflow/dags/data
  networks:
    - airflow_network

services:
  db:
    image: postgres:latest
    restart: always
    ports:
      - "15432:5432"
    environment:
      POSTGRES_USER: admin  # Correction ici
      POSTGRES_PASSWORD: admin
    networks:
      - airflow_network
    volumes:
      - pgdata:/var/lib/postgresql/data

  postgres-airflow:
    image: postgres:13
    container_name: postgres-airflow
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    ports:
      - "15433:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - airflow_network

  postgres-datamart:
    image: postgres:14
    container_name: postgres-datamart
    environment:
      POSTGRES_USER: datamart_user
      POSTGRES_PASSWORD: datamart_password
      POSTGRES_DB: datamart_db
    volumes:
      - datamart-volume:/var/lib/postgresql/data
    restart: always
    ports:
      - "15434:5432"
    networks:
      - airflow_network

  redis:
    image: redis:latest
    container_name: redis-airflow
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - airflow_network

  minio:
    image: minio/minio
    container_name: minio-archi
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minio-archi
      MINIO_ROOT_PASSWORD: minio123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./minio:/data
    networks:
      - airflow_network

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      redis:
        condition: service_healthy
      postgres-airflow:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    container_name: airflow-worker
    command: celery worker
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    container_name: airflow-triggerer
    command: triggerer
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        airflow db upgrade
        airflow users create -r Admin -u airflow -p airflow -e admin@example.com -f airflow -l admin || true
    networks:
      - airflow_network

networks:
  airflow_network:
    external: true  # Marquer le réseau comme externe pour éviter les conflits

volumes:
  pgdata:
  postgres-db-volume:
  datamart-volume:
